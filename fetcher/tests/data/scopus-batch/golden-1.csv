"Authors","Author full names","Author(s) ID","Title","Year","Source title","Volume","Issue","Art. No.","Page start","Page end","Page count","Cited by","DOI","Link","Affiliations","Authors with affiliations","Abstract","Author Keywords","Index Keywords","Molecular Sequence Numbers","Chemicals/CAS","Tradenames","Manufacturers","Funding Details","Funding Texts","References","Correspondence Address","Editors","Publisher","Sponsors","Conference name","Conference date","Conference location","Conference code","ISSN","ISBN","CODEN","PubMed ID","Language of Original Document","Abbreviated Source Title","Document Type","Publication Stage","Open Access","Source","EID"
"Van Der Storm T.; Bakker G.","Van Der Storm, Tijs (23399139300); Bakker, Geor (55910450300)","23399139300; 55910450300","MATLAB doesn't love me: An essay","2020","ACM International Conference Proceeding Series","","","","97","101","4","0","10.1145/3397537.3397557","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85090111942&doi=10.1145%2f3397537.3397557&partnerID=40&md5=567eed85719aeb188797bc10c483e8af","Centrum Wiskunde and Informatica (CWI), Amsterdam University of Groningen, Groningen, Netherlands; Sosei Heptares, Cambridge, United Kingdom; Amsterdam University Medical Centres (AUMC), Netherlands","Van Der Storm T., Centrum Wiskunde and Informatica (CWI), Amsterdam University of Groningen, Groningen, Netherlands; Bakker G., Sosei Heptares, Cambridge, United Kingdom, Amsterdam University Medical Centres (AUMC), Netherlands","Programming is everywhere, and is becoming an increasingly essential component of knowledge work outside the realms of traditional software development. Examples include data journalism, scientific computing, machine control, machine learning, financial management, and others. A key aspect of this trend is that users have to use programming tools, but typically lack programming education, let alone a computer science background. In this short paper we revisit potential assumptions and preconceptions underlying traditional programming system design, from the perspective of practicing scientists using tools like MATLAB, R, Bash, Python, C++, and others. Specifically, we aim to peel off some ingrained assumptions that have informed programming language and system design for decades. Without giving a lot of answers, we hope some of our contrarian observations may turn out to be controversial, and stimulate a meaningful discussion towards a better programmer experience in the domain of science. © 2020 ACM.","end-user programming; language design; programmer experience; scientific programming","C++ (programming language); Education computing; Software design; Systems analysis; Data journalisms; Financial managements; Machine controls; Programmer experiences; Programming education; Programming system; Programming tools; Science background; MATLAB","","","","","","","Atkinson M., Gesing S., Montagnat J., Taylor I., Scientific workflows: Past, present and future, Future Generation Computer Systems 75, 2017, pp. 216-227, (2017); Bakker G., Vingerhoets C., Boucherie D., Caan M., Bloemen O., Eersels J., Booij J., Van Amelsvoort T., Relationship between muscarinic M1 receptor binding and cognition in medication-free subjects with psychosis, NeuroImage: Clinical, 18, pp. 713-719, (2018); Barker A., Van Hemert J., Scientific workflow: A survey and research directions, Parallel Processing and Applied Mathematics, pp. 746-753, (2008); Bezanson J., Karpinski S., Shah V.B., Edelman A., Julia: A Fast Dynamic Language for Technical Computing, (2012); Curcin V., Ghanem M., Scientific workflow systems-Can one size fit all?, 2008 Cairo International Biomedical Engineering Conference., pp. 1-9, (2008); Goldberg A., Robson D., Smalltalk-80-The Language and Its Implementation., (1983); Hoare C.A.R., The emperor's old clothes, Commun. ACM, 24, 2, pp. 75-83, (1981); Ko A.J., Abraham R., Beckwith L., Blackwell A., Burnett M., Erwig M., Scaffidi C., Lawrance J., Lieberman H., Myers B., Et al., The state of the art in end-user software engineering, ACM Comput. Surv., 43, 3, (2011); Lawrence M.R., Memory & Imagination-New Paths to the Library of Congress, (1990); Mernik M., Heering J., Sloane A.M., When and how to develop domain-specific languages, ACM Comput. Surv., 37, 4, pp. 316-344, (2005); Nathan P.J., Bakker G., Lessons learned from using fMRI in the early clinical development of a mu-opioid receptor antagonist for disorders of compulsive consumption, Psychopharmacology, (2020); Pimentel J.F., Murta L., Braganholo V., Freire J., A large-scale study about quality and reproducibility of Jupyter notebooks, Proceedings of the 16th International Conference on Mining Software Repositories, MSR 2019, pp. 507-517, (2019); Jupyter P., Bussonnier M., Forde J., Freeman J., Granger B., Head T., Holdgraf C., Kelley K., Nalvarte G., Osheroff A., Pacer M., Panda Y., Perez F., Ragan Kelley B., Willing C., Binder 2.0-Reproducible, interactive, sharable environments for science at scale, Proceedings of the 17th Python in Science Conference, pp. 113-120, (2018); Turkle S., Papert S., Epistemological pluralism and the revaluation of the concrete, Journal of Mathematical Behavior, 11, pp. 3-33, (1992)","","Aguiar A.; Chiba S.; Boix E.G.","Association for Computing Machinery","AOSA; City of Porto; University of Porto","4th International Conference on Art, Science, and Engineering of Programming, Programming 2020","23 March 2020 through 26 March 2020","Virtual, Online","162144","","978-145037507-8","","","English","ACM Int. Conf. Proc. Ser.","Conference paper","Final","All Open Access; Green Open Access","Scopus","2-s2.0-85090111942"
"Hu M.; Zhang Y.","Hu, Mingzhe (57216464763); Zhang, Yu (7601314622)","57216464763; 7601314622","The Python/C API: Evolution, Usage Statistics, and Bug Patterns","2020","SANER 2020 - Proceedings of the 2020 IEEE 27th International Conference on Software Analysis, Evolution, and Reengineering","","","9054835","532","536","4","16","10.1109/SANER48275.2020.9054835","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85083582294&doi=10.1109%2fSANER48275.2020.9054835&partnerID=40&md5=fa73da4917836e87608f266defec9925","Lab for Intelligent Networking and Knowledge Engineering (LINKE), University of Science and Technology of China, Hefei, China","Hu M., Lab for Intelligent Networking and Knowledge Engineering (LINKE), University of Science and Technology of China, Hefei, China; Zhang Y., Lab for Intelligent Networking and Knowledge Engineering (LINKE), University of Science and Technology of China, Hefei, China","Python has become one of the most popular programming languages in the era of data science and machine learning, especially for its diverse libraries and extension modules. Python front-end with C/C++ native implementation achieves both productivity and performance, almost becoming the standard structure for many mainstream software systems. However, feature discrepancies between two languages can pose many security hazards in the interface layer using the Python/C API. In this paper, we applied static analysis to reveal the evolution and usage statistics of the Python/C API, and provided a summary and classification of its 10 bug patterns with empirical bug instances from Pillow, a widely used Python imaging library. Our toolchain can be easily extended to access different types of syntactic bug-finding checkers. And our systematical taxonomy to classify bugs can guide the construction of more highly automated and high-precision bug-finding tools. © 2020 IEEE.","Bug pattern; Evolution analysis; Fact extraction; Python/C API; Static analysis","Application programming interfaces (API); C++ (programming language); Object oriented programming; Program debugging; Reengineering; Static analysis; Bug finding; Bug finding tools; Extension module; Front end; High-precision; Interface layer; Software systems; Usage statistics; Computer software","","","","","National Natural Science Foundation of China, NSFC, (61772487); National Natural Science Foundation of China, NSFC; Natural Science Foundation of Anhui Province, (1808085MF198); Natural Science Foundation of Anhui Province","This work was partially funded by the National Natural Science Foundation of China (No. 61772487) and Anhui Provincial Natural Science Foundation (No.1808085MF198).","Li S., Tan G., Finding reference-counting errors in python/c programs with affine analysis, 28th European Conference on Object-Oriented Programming (ECOOP), pp. 80-104, (2014); Mao J., Chen Y., Xiao Q., Shi Y., Rid: Finding reference count bugs with inconsistent path pair checking, 21st International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), pp. 531-544, (2016); Li S., Tan G., Finding bugs in exceptional situations of jni programs, 16th ACM SIGSAC Conference on Computer and Communications Security (CCS), pp. 442-452, (2009); Li S., Tan G., Jet: Exception checking in the Java native interface, 26th ACM International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA), pp. 345-358, (2011); Furr M., Foster J.S., Checking type safety of foreign function calls, ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 62-72, (2005); Furr M., Foster J.S., Polymorphic type inference for the jni, 15th European Conference on Programming Languages and Systems (ESOP), pp. 309-324, (2006); Pillow; Tan G., Croft J., An empirical security study of the native code in the jdk, 17th USENIX Conference on Security Symposium (USENIX Security), pp. 365-377, (2008); Wang B., Chen L., Ma W., Chen Z., Xu B., An empirical study on the impact of python dynamic features on change-proneness, 27th International Conference on Software Engineering and Knowledge Engineering (SEKE), pp. 134-139, (2015); Lin W., Chen Z., Ma W., Chen L., Xu L., Xu B., An empirical study on the characteristics of python fine-grained source code change types, 32nd IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 188-199, (2016); Libclang: C Interface to Clang; On Parsing C, Type Declarations and Fake Headers; Python Developers Survey 2018 Results; Python/C API Reference Manual; Return after Error; Pass the Correct Types to Pyarg Parsetuple; Fixed Freeing Unallocated Pointer When Resizing with Height Too Large; Fixed Deprecation Warnings; Malloy B.A., Power J.F., Quantifying the transition from python 2 to 3: An empirical study of python applications, 11th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), pp. 314-323, (2017); PEP 353-using Ssize T As the Index Type; Bishop M., Dilger M., Et al., Checking for race conditions in file accesses, Computing Systems, 2, 2, pp. 131-152, (1996); Christopher T.W., Reference count garbage collection, Software: Practice and Experience, 14, 6, pp. 503-507, (1984); Simons A.J.H., Borrow, copy or steal: Loans and larceny in the orthodox canonical form, 13th SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications (OOPSLA), pp. 65-83, (1998)","","Kontogiannis K.; Khomh F.; Chatzigeorgiou A.; Fokaefs M.-E.; Zhou M.","Institute of Electrical and Electronics Engineers Inc.","IEEE Computer Society; Western University","27th IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2020","18 February 2020 through 21 February 2020","London","158982","","978-172815143-4","","","English","SANER - Proc. IEEE Int. Conf. Softw. Anal., Evol., Reengineering","Conference paper","Final","","Scopus","2-s2.0-85083582294"
"Duncan L.; Iten D.","Duncan, Lydia (57210646785); Iten, David (57210637238)","57210646785; 57210637238","Calling chapel code: Interoperability improvements","2019","Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)","","","","12","13","1","0","10.1145/3329722.3330144","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071162902&doi=10.1145%2f3329722.3330144&partnerID=40&md5=6f5ded4c3f36fc0c177246bb047acfa6","Cray Inc., Seattle, WA, United States; Cray Inc., Bloomington, MN, United States","Duncan L., Cray Inc., Seattle, WA, United States; Iten D., Cray Inc., Bloomington, MN, United States","Since CHIUW last year, the Chapel team has undertaken an effort to improve the ability to call Chapel code from other languages. This talk will cover a few areas of improvement: using Chapel code as a library from C, Python, and Fortran; and in addition, improvements to array interoperation. © 2019 Copyright held by the owner/author(s).","Arrays; C programming language; Chapel as a library; Fortran; Python","Codes (symbols); FORTRAN (programming language); Arrays; Interoperations; Python; C (programming language)","","","","","","","Information Technology - Futher Interoperability of Fortran with C. International Organization for Standardization / International Electrotechnical Commission., (2012); Lund S.A.F., Effective interoperability, The HIPERFIT Workshop for Partners and Faculty, (2014); Lund S.A.F., PyChapel. GitHub Repository, (2014)","","Robbins B.; Chamberlain B.L.","Association for Computing Machinery","ACM SIGPLAN","ACM SIGPLAN 6th Annual Chapel Implementers and Users Workshop, CHIUW 2019, held in conjunction with PLDI 2019","22 June 2019","Phoenix","149791","","978-145036800-1","PSPIE","","English","Proc ACM SIGPLAN Conf Program Lang Des Implementation PLDI","Conference paper","Final","","Scopus","2-s2.0-85071162902"
